Total: 464 samples
     416  89.7%  89.7%      464 100.0% thread_func
      16   3.4%  93.1%       16   3.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
       6   1.3%  94.4%        6   1.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       5   1.1%  95.5%        5   1.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
       4   0.9%  96.3%        4   0.9% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
       3   0.6%  97.0%        3   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       3   0.6%  97.6%       21   4.5% SortedList_lookup
       2   0.4%  98.1%        2   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       2   0.4%  98.5%        2   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       2   0.4%  98.9%       26   5.6% SortedList_insert
       1   0.2%  99.1%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       1   0.2%  99.4%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:201
       1   0.2%  99.6%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1714
       1   0.2%  99.8%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       1   0.2% 100.0%        1   0.2% 0x00007ffc7eba08e3
       0   0.0% 100.0%      464 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%        1   0.2% __GI___clock_gettime
       0   0.0% 100.0%      464 100.0% start_thread
ROUTINE ====================== thread_func in /u/cs/ugrad/miles/111/2/2b/lab2_list.c
   416    464 Total samples (flat / cumulative)
     .      .   60: 
     .      .   61: int hash(const char* key) {
     .      .   62: 	return ((key[0] + key[1]) % n_lists);
     .      .   63: }
     .      .   64: 
---
     .      .   65: void* thread_func(void* arg) {
     .      .   66:     struct timespec start, end;
     .      .   67: 
     .      .   68:     // INSERT.
     .      .   69: 
     .      .   70:     int i = *(int *) arg;
     .      .   71:     for (; i < n_elmts; i += n_threads) {
     .      .   72:         if (opt_sync == 'm') {
     .      .   73:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .   74:                 error_msg("Could not get clock time.", 1);
     .      .   75:             }
     .      .   76:             pthread_mutex_lock(&m_locks[indices[i]]);
     .      .   77:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .   78:                 error_msg("Could not get clock time.", 1);
     .      .   79:             }
     .      .   80:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   81: 
     .      .   82:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .   83:             pthread_mutex_unlock(&m_locks[indices[i]]);
     .      .   84:         }
     .      .   85:         else if (opt_sync == 's') {
     .      .   86:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .   87:                 error_msg("Could not get clock time.", 1);
     .      .   88:             }
   299    299   89:             while(__sync_lock_test_and_set(&s_locks[indices[i]], 1));
     .      1   90:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .   91:                 error_msg("Could not get clock time.", 1);
     .      .   92:             }
     .      .   93:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   94: 
     .     26   95:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .   96:             __sync_lock_release(&s_locks[indices[i]]);
     .      .   97:         }
     .      .   98:         else {
     .      .   99:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .  100:         }
     .      .  101:     }
     .      .  102: 
     .      .  103:     // LOOKUP/DELETE.
     .      .  104: 
     .      .  105:     SortedListElement_t* tmp = NULL;
     .      .  106: 
     .      .  107:     i = *(int *) arg;
     .      .  108:     for (; i < n_elmts; i += n_threads) {
     .      .  109:         if (opt_sync == 'm') {
     .      .  110:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .  111:                 error_msg("Could not get clock time.", 1);
     .      .  112:             }
     .      .  113:             pthread_mutex_lock(&m_locks[indices[i]]);
     .      .  114:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  115:                 error_msg("Could not get clock time.", 1);
     .      .  116:             }
     .      .  117:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  118: 
     .      .  119:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  120:             if (SortedList_delete(tmp) == 1) {
     .      .  121:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  122:             }
     .      .  123:             pthread_mutex_unlock(&m_locks[indices[i]]);
     .      .  124:         }
     .      .  125:         else if (opt_sync == 's') {
     .      .  126:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .  127:                 error_msg("Could not get clock time.", 1);
     .      .  128:             }
   117    117  129:             while(__sync_lock_test_and_set(&s_locks[indices[i]], 1));
     .      .  130:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  131:                 error_msg("Could not get clock time.", 1);
     .      .  132:             }
     .      .  133:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  134: 
     .     21  135:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  136:             if (SortedList_delete(tmp) == 1) {
     .      .  137:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  138:             }
     .      .  139:             __sync_lock_release(&s_locks[indices[i]]);
     .      .  140:         }
     .      .  141:         else {
     .      .  142:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  143:             if (SortedList_delete(tmp) == 1) {
     .      .  144:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  145:             }
     .      .  146:         }
     .      .  147:     }
     .      .  148:     
     .      .  149:     return NULL;
     .      .  150: }
---
     .      .  151: 
     .      .  152: int main(int argc, char* argv[]) {
     .      .  153: 
     .      .  154:     // Get arguments.
     .      .  155: 
ROUTINE ====================== thread_func in /u/cs/ugrad/miles/111/2/2b/lab2_list.c
   416    464 Total samples (flat / cumulative)
     .      .   60: 
     .      .   61: int hash(const char* key) {
     .      .   62: 	return ((key[0] + key[1]) % n_lists);
     .      .   63: }
     .      .   64: 
---
     .      .   65: void* thread_func(void* arg) {
     .      .   66:     struct timespec start, end;
     .      .   67: 
     .      .   68:     // INSERT.
     .      .   69: 
     .      .   70:     int i = *(int *) arg;
     .      .   71:     for (; i < n_elmts; i += n_threads) {
     .      .   72:         if (opt_sync == 'm') {
     .      .   73:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .   74:                 error_msg("Could not get clock time.", 1);
     .      .   75:             }
     .      .   76:             pthread_mutex_lock(&m_locks[indices[i]]);
     .      .   77:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .   78:                 error_msg("Could not get clock time.", 1);
     .      .   79:             }
     .      .   80:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   81: 
     .      .   82:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .   83:             pthread_mutex_unlock(&m_locks[indices[i]]);
     .      .   84:         }
     .      .   85:         else if (opt_sync == 's') {
     .      .   86:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .   87:                 error_msg("Could not get clock time.", 1);
     .      .   88:             }
   299    299   89:             while(__sync_lock_test_and_set(&s_locks[indices[i]], 1));
     .      1   90:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .   91:                 error_msg("Could not get clock time.", 1);
     .      .   92:             }
     .      .   93:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   94: 
     .     26   95:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .   96:             __sync_lock_release(&s_locks[indices[i]]);
     .      .   97:         }
     .      .   98:         else {
     .      .   99:             SortedList_insert(&lists[indices[i]], &elmts[i]);
     .      .  100:         }
     .      .  101:     }
     .      .  102: 
     .      .  103:     // LOOKUP/DELETE.
     .      .  104: 
     .      .  105:     SortedListElement_t* tmp = NULL;
     .      .  106: 
     .      .  107:     i = *(int *) arg;
     .      .  108:     for (; i < n_elmts; i += n_threads) {
     .      .  109:         if (opt_sync == 'm') {
     .      .  110:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .  111:                 error_msg("Could not get clock time.", 1);
     .      .  112:             }
     .      .  113:             pthread_mutex_lock(&m_locks[indices[i]]);
     .      .  114:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  115:                 error_msg("Could not get clock time.", 1);
     .      .  116:             }
     .      .  117:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  118: 
     .      .  119:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  120:             if (SortedList_delete(tmp) == 1) {
     .      .  121:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  122:             }
     .      .  123:             pthread_mutex_unlock(&m_locks[indices[i]]);
     .      .  124:         }
     .      .  125:         else if (opt_sync == 's') {
     .      .  126:             if (clock_gettime(CLOCK_MONOTONIC, &start) < 0) {
     .      .  127:                 error_msg("Could not get clock time.", 1);
     .      .  128:             }
   117    117  129:             while(__sync_lock_test_and_set(&s_locks[indices[i]], 1));
     .      .  130:             if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  131:                 error_msg("Could not get clock time.", 1);
     .      .  132:             }
     .      .  133:             tot_wait_time += 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  134: 
     .     21  135:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  136:             if (SortedList_delete(tmp) == 1) {
     .      .  137:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  138:             }
     .      .  139:             __sync_lock_release(&s_locks[indices[i]]);
     .      .  140:         }
     .      .  141:         else {
     .      .  142:             tmp = SortedList_lookup(&lists[indices[i]], elmts[i].key);
     .      .  143:             if (SortedList_delete(tmp) == 1) {
     .      .  144:                 error_msg("List is corrupt; element could not be deleted.", 2);
     .      .  145:             }
     .      .  146:         }
     .      .  147:     }
     .      .  148:     
     .      .  149:     return NULL;
     .      .  150: }
---
     .      .  151: 
     .      .  152: int main(int argc, char* argv[]) {
     .      .  153: 
     .      .  154:     // Get arguments.
     .      .  155: 
